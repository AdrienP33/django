import datetime

from django.db import models
from django.utils import timezone


class ImportOptimum(models.Model):
    dossier = models.CharField(max_length=50, null=True)
    zone_arcep_site = models.IntegerField(null=True)
    num_asoeie = models.CharField(max_length=50, null=True)
    code_regroupement_syndic = models.CharField(max_length=50, null=True)
    nb_logement_de_regroupement = models.CharField(max_length=50, null=True)
    id_pm = models.CharField(max_length=50, null=True)
    site_hebergeant_le_pmi = models.CharField(max_length=50, null=True)
    type_de_pm = models.CharField(max_length=50, null=True)
    etat_de_pm = models.CharField(max_length=50, null=True)
    date_etat_pm = models.DateTimeField('Date Etat PM', null=True)
    date_construction_pm = models.DateTimeField('Date Constrution PM', null=True)
    zone_arcep_pm = models.CharField(max_length=50, null=True)
    num_de_lot = models.CharField(max_length=50, null=True)
    id_pa = models.CharField(max_length=50, null=True)
    etat_de_pa = models.CharField(max_length=50, null=True)
    identifiant_processus = models.CharField(max_length=50, null=True)
    type_processus_particulier = models.CharField(max_length=50, null=True)
    cle_du_site_calculee = models.CharField(max_length=50, null=True)
    cle_du_site_reelle = models.CharField(max_length=50, null=True)
    densité_iris = models.CharField(max_length=50, null=True)
    code_iris = models.CharField(max_length=50, null=True)
    date_maj_contour = models.DateTimeField('Date Maj contour', null=True)
    num_voie = models.IntegerField(null=True)
    num_cplt = models.IntegerField(null=True)
    voie = models.CharField(max_length=50, null=True)
    adresse = models.CharField(max_length=50, null=True)
    batiment = models.CharField(max_length=50, null=True)
    escalier = models.CharField(max_length=50, null=True)
    cp = models.CharField(max_length=50, null=True)
    Localite = models.CharField(max_length=50, null=True)
    rivoli = models.CharField(max_length=50, null=True)
    operateur_d_imeuble = models.CharField(max_length=50, null=True)
    etat_negociation = models.CharField(max_length=50, null=True)
    etat_technique = models.CharField(max_length=50, null=True)
    etat_site = models.CharField(max_length=50, null=True)
    site_sature = models.CharField(max_length=50, null=True)
    site_bloque = models.CharField(max_length=50, null=True)
    seuil_prospects = models.CharField(max_length=50, null=True)
    type_site = models.CharField(max_length=50, null=True)
    presence_concurrent = models.CharField(max_length=50, null=True)
    date_de_construction = models.DateTimeField('date de construction', null=True)
    dlpi = models.CharField(max_length=50, null=True)
    detection_zlin = models.CharField(max_length=50, null=True)
    type_de_commercialisation = models.CharField(max_length=50, null=True)
    etat_zlin = models.CharField(max_length=50, null=True)
    j3m = models.CharField(max_length=50, null=True)
    fttdp = models.CharField(max_length=50, null=True)
    pre_equipe = models.CharField(max_length=50, null=True)
    taille_site = models.CharField(max_length=50, null=True)
    code_taille_site = models.CharField(max_length=50, null=True)
    nb_logement = models.IntegerField(null=True)
    nb_logement_r = models.IntegerField(null=True)
    nb_logement_p = models.IntegerField(null=True)
    nb_escaliers = models.IntegerField(null=True)
    nb_etages = models.IntegerField(null=True)
    premier_dem_pap = models.CharField(max_length=50, null=True)
    dernier_dem_pap = models.CharField(max_length=50, null=True)
    nb_demarchage_pap = models.IntegerField(null=True)
    date_dern_isa = models.DateTimeField('date dern. ISA', null=True)
    suivi_strategique_upr = models.CharField(max_length=50, null=True)
    marquage_temporaire_upr = models.CharField(max_length=50, null=True)
    annee_programme = models.IntegerField(null=True)
    potentiel_immeuble = models.CharField(max_length=50, null=True)
    immeuble_prioritaire = models.CharField(max_length=50, null=True)
    typologie = models.CharField(max_length=50, null=True)
    presence_vip = models.CharField(max_length=50, null=True)
    etat_acces_immeuble = models.CharField(max_length=50, null=True)
    envoi_commande_acces_immeuble = models.CharField(max_length=50, null=True)
    validation_commande_acces_immeuble = models.CharField(max_length=50, null=True)
    date_annulation_commande = models.DateTimeField('date dern. ISA', null=True)
    civilite_pdt_conseil_syndical = models.CharField(max_length=50, null=True)
    nom_pdt_conseil_syndical = models.CharField(max_length=50, null=True)
    prenom_pdt_conseil_syndical = models.CharField(max_length=50, null=True)
    num_tel_pdt_conseil_syndical = models.CharField(max_length=50, null=True)
    num_mobile_pdt_conseil_syndical = models.CharField(max_length=50, null=True)
    fax_pdt_conseil_syndical = models.CharField(max_length=50, null=True)
    email_conseil_syndical = models.CharField(max_length=50, null=True)
    ref_arbre = models.CharField(max_length=50, null=True)
    dr = models.CharField(max_length=50, null=True)
    nra = models.CharField(max_length=50, null=True)
    phase_depl = models.CharField(max_length=50, null=True)
    date_depl_imm = models.DateTimeField('date depl. Imm', null=True)
    date_depl_pav = models.DateTimeField('date depl. Pav', null=True)
    charge_etude_arbre = models.CharField(max_length=50, null=True)
    zone = models.CharField(max_length=50, null=True)
    nb_prise_interet = models.IntegerField(null=True)
    nb_pre_commandes = models.IntegerField(null=True)
    nb_pre_signes = models.IntegerField(null=True)
    type_blocage_site = models.CharField(max_length=50, null=True)
    cause_blocage_syndic = models.CharField(max_length=50, null=True)
    date_theorique_deblocage_syndic = models.DateTimeField('date deblocage syndic', null=True)
    etat_pre_etude_site = models.CharField(max_length=50, null=True)
    date_lancement_pre_etude = models.DateTimeField('date lancement pré-étude', null=True)
    pez = models.CharField(max_length=50, null=True)
    charges_etude = models.CharField(max_length=50, null=True)
    date_lancement_t_d = models.DateTimeField('date lancement T/D', null=True)
    date_fin_transport = models.DateTimeField('date fin transport', null=True)
    date_fin_distribution = models.DateTimeField('date fin distribution', null=True)
    realisation_reseau_t_d = models.CharField(max_length=50, null=True)
    etat_reseau_t_d = models.CharField(max_length=50, null=True)
    reseau_impossible = models.CharField(max_length=50, null=True)
    date_mise_a_disposition_pre_etude = models.DateTimeField('date mise à disposition pré-étude', null=True)
    retour_syndic_pre_etude = models.CharField(max_length=50, null=True)
    date_demande_de_modification_de_pre_etude = models.DateTimeField('date demande de modification de pré-étude', null=True)
    date_debut_raccordement = models.DateTimeField('date début raccordement', null=True)
    date_annulation_pre_etude_ui = models.DateTimeField('date annulation pré-étude (UI)', null=True)
    etude_site = models.CharField(max_length=50, null=True)
    etat_etude_site = models.CharField(max_length=50, null=True)
    date_fin_etude_site = models.DateTimeField('date fin étude site', null=True)
    resulte_etude_site = models.CharField(max_length=50, null=True)
    date_annulation_production = models.DateTimeField('date fin étude site', null=True)
    date_mesc_ft = models.DateTimeField('Date MESC FT', null=True)
    date_mesc_arcep_site = models.DateTimeField('Date MESC ARCEP Site', null=True)
    date_theorique_raccordement = models.DateTimeField('Date théorique raccordement', null=True)
    date_programmee_raccordement = models.DateTimeField('Date programmée raccordement', null=True)
    date_raccordement_au_pm_ou_au_pa = models.DateTimeField('Date raccordement au PM ou au PA', null=True)
    identifiant_pb = models.CharField(max_length=50, null=True)
    date_pose_du_pb = models.DateTimeField('Date pose du PB', null=True)
    date_effective_raccordement = models.DateTimeField('Date effective raccordement', null=True)
    verification_technique = models.CharField(max_length=50, null=True)
    qualite_etude = models.CharField(max_length=50, null=True)
    qualite_base_descriptive = models.CharField(max_length=50, null=True)
    code_syndic = models.CharField(max_length=50, null=True)
    nom_syndic = models.CharField(max_length=50, null=True)
    interlocuteur_unique = models.CharField(max_length=50, null=True)
    presence_dta = models.CharField(max_length=50, null=True)
    nom_contact_syndic = models.CharField(max_length=50, null=True)
    prenom_contact_syndic = models.CharField(max_length=50, null=True)
    num_tel_contact_syndic = models.CharField(max_length=50, null=True)
    date_affectation_negociateur = models.DateTimeField('Date affectation négociateur', null=True)
    negociateur_interne = models.CharField(max_length=50, null=True)
    negociateur_externe = models.CharField(max_length=50, null=True)
    premier_conctact = models.CharField(max_length=50, null=True)
    date_rdv_syndic = models.DateTimeField('Date RDV Syndic', null=True)
    attente = models.CharField(max_length=50, null=True)
    date_ag = models.DateTimeField('Date AG', null=True)
    ag_non_pertinente = models.CharField(max_length=50, null=True)
    envoi_accord_syndic = models.CharField(max_length=50, null=True)
    date_retour_convention = models.DateTimeField('Date Retour Convention', null=True)
    attente_probation = models.CharField(max_length=50, null=True)
    retour_attente_syndic = models.CharField(max_length=50, null=True)
    refus_attente_syndic = models.CharField(max_length=50, null=True)
    motif_refus = models.CharField(max_length=50, null=True)
    date_denonciation_syndic = models.DateTimeField('Date dénonciation syndic', null=True)
    motif_denonciation_syndic = models.CharField(max_length=50, null=True)
    derniere_relance_syndic = models.DateTimeField('Dern. Relance syndic', null=True)
    date_recept_bon_pre_etude = models.DateTimeField('Date récept. bon pré-étude', null=True)
    date_envoi_pre_etude_syndic = models.DateTimeField('Date envoi pré-étude au syndic', null=True)
    date_dernier_envoi_pre_etude_syndic = models.DateTimeField('Date dernier envoi syndic pré-étude', null=True)
    date_souhaitee_pre_etude = models.DateTimeField('Date souhaitée pré-étude', null=True)
    date_validation_pre_etude_par_syndic = models.DateTimeField('Date validation pré-étude par syndic', null=True)
    suivi_syndic_particulier = models.CharField(max_length=50, null=True)
    p_a_p = models.CharField(max_length=50, null=True)
    date_de_saisie_de_l_accord_syndic = models.DateTimeField('Date validation pré-étude par syndic', null=True)
    domaine = models.CharField(max_length=50, null=True)
    date_mesc_arcep_pm = models.DateTimeField('Date MESC ARCEP PM', null=True)
    etat_de_deploiement = models.CharField(max_length=50, null=True)
    zone_rome = models.CharField(max_length=50, null=True)
    pa_ready = models.CharField(max_length=50, null=True)
    date_pose_pre = models.DateTimeField('Date Pose PRE', null=True)
    ensemble_immobilier = models.CharField(max_length=50, null=True)
    permis_de_construire = models.CharField(max_length=50, null=True)
    zone_nouvelle = models.CharField(max_length=50, null=True)
    adresse_provisoire = models.CharField(max_length=50, null=True)
    etat_commande_producction = models.CharField(max_length=50, null=True)
    date_fin_etude_zone_arriere_du_pa = models.DateTimeField('Date Fin Etude Zone Arrière du PA ', null=True)

    pub_date = models.DateTimeField('date published', null=True)
    # author = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return self.importOptimum

    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=5)


class Pa(models.Model):
    idPa = models.CharField(max_length=50, primary_key=True)
    # importe = models.ForeignKey(ImportOptimum, on_delete=models.CASCADE)


class Imb(models.Model):
    idImb = models.CharField(max_length=50, primary_key=True)
    date_effective_de_raccordement = models.DateTimeField('dare effective de raccordement')
